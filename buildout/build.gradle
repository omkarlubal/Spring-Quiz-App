buildscript {
    ext {
        buildId = System.currentTimeMillis()
        springBootVersion = "2.2.0.RELEASE"
        junitVersion = "5.3.1"
        junitPlatformLauncherVersion = "1.3.1"
        mockitoVersion = "2.22.0"
        swaggerVersion = "2.9.2"
        lombokVersion = "1.18.2"
        modelMapperVersion = "2.3.2"
        jacksonVersion = "2.9.8"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management'
    id 'java'
    id 'jacoco'
    id "name.remal.sonarlint" version "1.0.189"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.omkarlubal.quiz.QuizApplication'
        )
    }
}

group 'com.crio'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.slf4j:jul-to-slf4j:1.7.28"

    compile "org.springframework.boot:spring-boot-starter-webflux"
    compile 'org.projectreactor:reactor-spring:1.0.1.RELEASE'

    implementation "org.modelmapper:modelmapper:$modelMapperVersion"
    implementation "javax.inject:javax.inject:1"
    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"
    implementation "org.projectlombok:lombok:$lombokVersion"

    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    implementation "redis.clients:jedis:3.2.0"

    annotationProcessor "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    testCompile group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '2.2.0'

    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation ("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
        exclude group: "junit", module: "junit"
    }
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
}

test {
    useJUnitPlatform {
    }
    reports {
        junitXml.enabled = true
        def destinationDirectory = System.getProperty("user.home") + "/.gradle/daemon/${buildId}/test-results"
        junitXml.destination = file(destinationDirectory)
        html.enabled = true
    }
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.40
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.40
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.40
            }
        }
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'hellocucumber', 'src/test/resources']
        }
    }
}

sonarlint {
    ignoreFailures = true
}
//check.dependsOn jacocoTestCoverageVerification


// sonarlintMain

